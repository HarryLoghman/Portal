//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharedLibrary.MobinOneMapfaSendServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Srv/", ConfigurationName="MobinOneMapfaSendServiceReference.Send")]
    public interface Send {
        
        // CODEGEN: Parameter 'ServiceSendReturn' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ServiceSendReturn")]
        SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse ServiceSend(SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse> ServiceSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest request);
        
        // CODEGEN: Parameter 'UltraSendReturn' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UltraSendReturn")]
        SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse UltraSend(SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse> UltraSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SubscribeReturn")]
        string Subscribe(string username, string password, string domain, string shortcode, string subscriber, string ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SubscribeReturn")]
        System.Threading.Tasks.Task<string> SubscribeAsync(string username, string password, string domain, string shortcode, string subscriber, string ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UnsubscribeReturn")]
        string Unsubscribe(string username, string password, string domain, string shortcode, string subscriber, string ServiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UnsubscribeReturn")]
        System.Threading.Tasks.Task<string> UnsubscribeAsync(string username, string password, string domain, string shortcode, string subscriber, string ServiceId);
        
        // CODEGEN: Parameter 'RSendReturn' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RSendReturn")]
        SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse RSend(SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse> RSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceSend", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class ServiceSendRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=2)]
        public string domain;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=3)]
        public int msgType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("messages")]
        public string[] messages;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("destinations")]
        public string[] destinations;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute("originators")]
        public string[] originators;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute("udhs")]
        public string[] udhs;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute("mClass")]
        public string[] mClass;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute("ServiceIds")]
        public string[] ServiceIds;
        
        public ServiceSendRequest() {
        }
        
        public ServiceSendRequest(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass, string[] ServiceIds) {
            this.username = username;
            this.password = password;
            this.domain = domain;
            this.msgType = msgType;
            this.messages = messages;
            this.destinations = destinations;
            this.originators = originators;
            this.udhs = udhs;
            this.mClass = mClass;
            this.ServiceIds = ServiceIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceSendResponse", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class ServiceSendResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ServiceSendReturn")]
        public long[] ServiceSendReturn;
        
        public ServiceSendResponse() {
        }
        
        public ServiceSendResponse(long[] ServiceSendReturn) {
            this.ServiceSendReturn = ServiceSendReturn;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UltraSend", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class UltraSendRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=2)]
        public string domain;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=3)]
        public string cpuserid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=4)]
        public int msgType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("messages")]
        public string[] messages;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute("destinations")]
        public string[] destinations;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute("originators")]
        public string[] originators;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute("ServiceIds")]
        public string[] ServiceIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=9)]
        public string info;
        
        public UltraSendRequest() {
        }
        
        public UltraSendRequest(string username, string password, string domain, string cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            this.username = username;
            this.password = password;
            this.domain = domain;
            this.cpuserid = cpuserid;
            this.msgType = msgType;
            this.messages = messages;
            this.destinations = destinations;
            this.originators = originators;
            this.ServiceIds = ServiceIds;
            this.info = info;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UltraSendResponse", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class UltraSendResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("UltraSendReturn")]
        public long[] UltraSendReturn;
        
        public UltraSendResponse() {
        }
        
        public UltraSendResponse(long[] UltraSendReturn) {
            this.UltraSendReturn = UltraSendReturn;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RSend", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class RSendRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=2)]
        public string domain;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("cpuserid")]
        public string[] cpuserid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=4)]
        public int msgType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("messages")]
        public string[] messages;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute("destinations")]
        public string[] destinations;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute("originators")]
        public string[] originators;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute("ServiceIds")]
        public string[] ServiceIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=9)]
        public string info;
        
        public RSendRequest() {
        }
        
        public RSendRequest(string username, string password, string domain, string[] cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            this.username = username;
            this.password = password;
            this.domain = domain;
            this.cpuserid = cpuserid;
            this.msgType = msgType;
            this.messages = messages;
            this.destinations = destinations;
            this.originators = originators;
            this.ServiceIds = ServiceIds;
            this.info = info;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RSendResponse", WrapperNamespace="http://Srv/", IsWrapped=true)]
    public partial class RSendResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://Srv/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("RSendReturn")]
        public long[] RSendReturn;
        
        public RSendResponse() {
        }
        
        public RSendResponse(long[] RSendReturn) {
            this.RSendReturn = RSendReturn;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SendChannel : SharedLibrary.MobinOneMapfaSendServiceReference.Send, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendClient : System.ServiceModel.ClientBase<SharedLibrary.MobinOneMapfaSendServiceReference.Send>, SharedLibrary.MobinOneMapfaSendServiceReference.Send {
        
        public SendClient() {
        }
        
        public SendClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SendClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SendClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SendClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse SharedLibrary.MobinOneMapfaSendServiceReference.Send.ServiceSend(SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest request) {
            return base.Channel.ServiceSend(request);
        }
        
        public long[] ServiceSend(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass, string[] ServiceIds) {
            SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.udhs = udhs;
            inValue.mClass = mClass;
            inValue.ServiceIds = ServiceIds;
            SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse retVal = ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).ServiceSend(inValue);
            return retVal.ServiceSendReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse> SharedLibrary.MobinOneMapfaSendServiceReference.Send.ServiceSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest request) {
            return base.Channel.ServiceSendAsync(request);
        }
        
        public System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendResponse> ServiceSendAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass, string[] ServiceIds) {
            SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.ServiceSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.udhs = udhs;
            inValue.mClass = mClass;
            inValue.ServiceIds = ServiceIds;
            return ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).ServiceSendAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse SharedLibrary.MobinOneMapfaSendServiceReference.Send.UltraSend(SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest request) {
            return base.Channel.UltraSend(request);
        }
        
        public long[] UltraSend(string username, string password, string domain, string cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.cpuserid = cpuserid;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.ServiceIds = ServiceIds;
            inValue.info = info;
            SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse retVal = ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).UltraSend(inValue);
            return retVal.UltraSendReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse> SharedLibrary.MobinOneMapfaSendServiceReference.Send.UltraSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest request) {
            return base.Channel.UltraSendAsync(request);
        }
        
        public System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendResponse> UltraSendAsync(string username, string password, string domain, string cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.UltraSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.cpuserid = cpuserid;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.ServiceIds = ServiceIds;
            inValue.info = info;
            return ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).UltraSendAsync(inValue);
        }
        
        public string Subscribe(string username, string password, string domain, string shortcode, string subscriber, string ServiceId) {
            return base.Channel.Subscribe(username, password, domain, shortcode, subscriber, ServiceId);
        }
        
        public System.Threading.Tasks.Task<string> SubscribeAsync(string username, string password, string domain, string shortcode, string subscriber, string ServiceId) {
            return base.Channel.SubscribeAsync(username, password, domain, shortcode, subscriber, ServiceId);
        }
        
        public string Unsubscribe(string username, string password, string domain, string shortcode, string subscriber, string ServiceId) {
            return base.Channel.Unsubscribe(username, password, domain, shortcode, subscriber, ServiceId);
        }
        
        public System.Threading.Tasks.Task<string> UnsubscribeAsync(string username, string password, string domain, string shortcode, string subscriber, string ServiceId) {
            return base.Channel.UnsubscribeAsync(username, password, domain, shortcode, subscriber, ServiceId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse SharedLibrary.MobinOneMapfaSendServiceReference.Send.RSend(SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest request) {
            return base.Channel.RSend(request);
        }
        
        public long[] RSend(string username, string password, string domain, string[] cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.cpuserid = cpuserid;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.ServiceIds = ServiceIds;
            inValue.info = info;
            SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse retVal = ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).RSend(inValue);
            return retVal.RSendReturn;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse> SharedLibrary.MobinOneMapfaSendServiceReference.Send.RSendAsync(SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest request) {
            return base.Channel.RSendAsync(request);
        }
        
        public System.Threading.Tasks.Task<SharedLibrary.MobinOneMapfaSendServiceReference.RSendResponse> RSendAsync(string username, string password, string domain, string[] cpuserid, int msgType, string[] messages, string[] destinations, string[] originators, string[] ServiceIds, string info) {
            SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest inValue = new SharedLibrary.MobinOneMapfaSendServiceReference.RSendRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.domain = domain;
            inValue.cpuserid = cpuserid;
            inValue.msgType = msgType;
            inValue.messages = messages;
            inValue.destinations = destinations;
            inValue.originators = originators;
            inValue.ServiceIds = ServiceIds;
            inValue.info = info;
            return ((SharedLibrary.MobinOneMapfaSendServiceReference.Send)(this)).RSendAsync(inValue);
        }
    }
}
