//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharedLibrary.PardisPlatformServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://example", ConfigurationName="PardisPlatformServiceReference.HelloWorld")]
    public interface HelloWorld {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueueReturn")]
        long[] enqueue(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueueReturn")]
        System.Threading.Tasks.Task<long[]> enqueueAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="matchReturn")]
        bool match(string message, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="matchReturn")]
        System.Threading.Tasks.Task<bool> matchAsync(string message, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="queryReturn")]
        int[] query(string username, string password, string domain, long[] messageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="queryReturn")]
        System.Threading.Tasks.Task<int[]> queryAsync(string username, string password, string domain, long[] messageIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="fanclubcontentReturn")]
        long fanclubcontent(string username, string password, string domain, string message, string team);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="fanclubcontentReturn")]
        System.Threading.Tasks.Task<long> fanclubcontentAsync(string username, string password, string domain, string message, string team);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueuebinaryReturn")]
        long[] enqueuebinary(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueuebinaryReturn")]
        System.Threading.Tasks.Task<long[]> enqueuebinaryAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="smsonportbinaryReturn")]
        long[] smsonportbinary(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="smsonportbinaryReturn")]
        System.Threading.Tasks.Task<long[]> smsonportbinaryAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueuebinary2Return")]
        long[] enqueuebinary2(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="enqueuebinary2Return")]
        System.Threading.Tasks.Task<long[]> enqueuebinary2Async(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ServiceSendReturn")]
        long[] ServiceSend(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] serviceid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ServiceSendReturn")]
        System.Threading.Tasks.Task<long[]> ServiceSendAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] serviceid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BinarySendReturn")]
        long[] BinarySend(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] udhsPart, string[] udhsTotal, string[] clientID, string[] serviceid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BinarySendReturn")]
        System.Threading.Tasks.Task<long[]> BinarySendAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] udhsPart, string[] udhsTotal, string[] clientID, string[] serviceid);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sendwappushReturn")]
        long[] sendwappush(string username, string password, string domain, string[] messages, string[] destinations, string[] originators);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="sendwappushReturn")]
        System.Threading.Tasks.Task<long[]> sendwappushAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface HelloWorldChannel : SharedLibrary.PardisPlatformServiceReference.HelloWorld, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HelloWorldClient : System.ServiceModel.ClientBase<SharedLibrary.PardisPlatformServiceReference.HelloWorld>, SharedLibrary.PardisPlatformServiceReference.HelloWorld {
        
        public HelloWorldClient() {
        }
        
        public HelloWorldClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HelloWorldClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HelloWorldClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HelloWorldClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long[] enqueue(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueue(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public System.Threading.Tasks.Task<long[]> enqueueAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueueAsync(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public bool match(string message, string pattern) {
            return base.Channel.match(message, pattern);
        }
        
        public System.Threading.Tasks.Task<bool> matchAsync(string message, string pattern) {
            return base.Channel.matchAsync(message, pattern);
        }
        
        public int[] query(string username, string password, string domain, long[] messageIds) {
            return base.Channel.query(username, password, domain, messageIds);
        }
        
        public System.Threading.Tasks.Task<int[]> queryAsync(string username, string password, string domain, long[] messageIds) {
            return base.Channel.queryAsync(username, password, domain, messageIds);
        }
        
        public long fanclubcontent(string username, string password, string domain, string message, string team) {
            return base.Channel.fanclubcontent(username, password, domain, message, team);
        }
        
        public System.Threading.Tasks.Task<long> fanclubcontentAsync(string username, string password, string domain, string message, string team) {
            return base.Channel.fanclubcontentAsync(username, password, domain, message, team);
        }
        
        public long[] enqueuebinary(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueuebinary(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public System.Threading.Tasks.Task<long[]> enqueuebinaryAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueuebinaryAsync(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public long[] smsonportbinary(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.smsonportbinary(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public System.Threading.Tasks.Task<long[]> smsonportbinaryAsync(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.smsonportbinaryAsync(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public long[] enqueuebinary2(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueuebinary2(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public System.Threading.Tasks.Task<long[]> enqueuebinary2Async(string username, string password, string domain, int msgType, string[] messages, string[] destinations, string[] originators, string[] udhs, string[] mClass) {
            return base.Channel.enqueuebinary2Async(username, password, domain, msgType, messages, destinations, originators, udhs, mClass);
        }
        
        public long[] ServiceSend(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] serviceid) {
            return base.Channel.ServiceSend(username, password, domain, messages, destinations, originators, serviceid);
        }
        
        public System.Threading.Tasks.Task<long[]> ServiceSendAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] serviceid) {
            return base.Channel.ServiceSendAsync(username, password, domain, messages, destinations, originators, serviceid);
        }
        
        public long[] BinarySend(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] udhsPart, string[] udhsTotal, string[] clientID, string[] serviceid) {
            return base.Channel.BinarySend(username, password, domain, messages, destinations, originators, udhsPart, udhsTotal, clientID, serviceid);
        }
        
        public System.Threading.Tasks.Task<long[]> BinarySendAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators, string[] udhsPart, string[] udhsTotal, string[] clientID, string[] serviceid) {
            return base.Channel.BinarySendAsync(username, password, domain, messages, destinations, originators, udhsPart, udhsTotal, clientID, serviceid);
        }
        
        public long[] sendwappush(string username, string password, string domain, string[] messages, string[] destinations, string[] originators) {
            return base.Channel.sendwappush(username, password, domain, messages, destinations, originators);
        }
        
        public System.Threading.Tasks.Task<long[]> sendwappushAsync(string username, string password, string domain, string[] messages, string[] destinations, string[] originators) {
            return base.Channel.sendwappushAsync(username, password, domain, messages, destinations, originators);
        }
    }
}
