
@{
    ViewBag.Title = "کاربران";
}
<button id="newUser" class="k-primary k-button" style="width: 10%;margin-right:10px" onclick="window.location = '/Account/Register';"><span>کاربر  جدید</span></button>
<div class="k-rtl" id="grid"></div>

<script>

    var multiRolesToString = function (item) {
        //alert(typeof item.roles ==="string");
        //return item.roles.join(',');
        //alert(item.roles.join(','));
        if (item == null) return "";
        if (item.roles == null) return "";
        if ((typeof item.roles === "string"))
            return item.roles;
        else {
            //alert(item.roles.join(','));
            return item.roles.join(',');
        }
        return item.roles;
    };

    var multiServicesToString = function (item) {
        //alert(typeof item.roles ==="string");
        //return item.roles.join(',');
        //alert(item.roles.join(','));
        if (item == null) return "";
        if (item.services == null) return "";
        if ((typeof item.services === "string"))
            return item.services;
        else {
            //alert(item.roles.join(','));
            return item.services.join(',');
        }
        return item.services;
    };

    var multiAggregatorsToString = function (item) {
        //alert(typeof item.roles ==="string");
        //return item.roles.join(',');
        //alert(item.roles.join(','));
        if (item == null) return "";
        if (item.aggregators == null) return "";
        if ((typeof item.aggregators === "string"))
            return item.aggregators;
        else {
            //alert(item.roles.join(','));
            return item.aggregators.join(',');
        }
        return item.aggregators;
    };
    @{  var portal = new SharedLibrary.Models.PortalEntities();
        var dbRoles =  portal.AspNetRoles.Select(o => o.Name).ToList();

        string roles = "";
        for (int i = 0; i <= dbRoles.Count - 1; i++)
        { roles = roles + "'" + dbRoles[i] + "',"; }
        if (roles != "") { roles = roles.Remove(roles.Length - 1, 1); roles = "[" + roles + "]"; }


        var dbServices = portal.Services.Select(o => o.ServiceCode).ToList();

        string services = "";
        for (int i = 0; i <= dbServices.Count - 1; i++)
        { services = services + "'" + dbServices[i] + "',"; }
        if (services != "") { services = services.Remove(services.Length - 1, 1); services = "[" + services + "]"; }


        var dbAggregators = portal.Aggregators.Select(o => o.AggregatorName).ToList();

        string aggregators = "";
        for (int i = 0; i <= dbAggregators.Count - 1; i++)
        { aggregators = aggregators + "'" + dbAggregators[i] + "',"; }
        if (aggregators != "") { aggregators = aggregators.Remove(aggregators.Length - 1, 1); aggregators = "[" + aggregators + "]"; }
            }
        var vm = kendo.observable({
            roles:@Html.Raw(roles),
            services:@Html.Raw(services),
            aggregators:@Html.Raw(aggregators),


    });
    $("#grid").kendoGrid({
      
            columns: [
            { field: "Id", title: "شناسه" },
            { field: "name", title: "نام", editor: textEditor },
            { field: "lastName", title: "نام خانوادگی", editor: textEditor },
            { field: "userName", title: "شناسه کاربری", editor: textEditor },
            { field: "roles", title: "نقشها", editor: multiselectEditor, values: vm.roles, template: multiRolesToString},
            { field: "services", title: "دسترسی سرویسها", editor: multiselectEditor, values: vm.services, template: multiServicesToString },
            { field: "aggregators", title: "دسترسی Aggregator ها", editor: multiselectEditor, values: vm.aggregators, template: multiAggregatorsToString },
                {
                    command: ["edit", "destroy", { name: "setting", text: "...", click: changePassword },
                    ], width: 250
                },

        ],
        dataSource: {
                error: function (e) { grid_error_handler(e) },
            type: "aspnetmvc-ajax",
            transport: {
                    read: {
                        url: "Users/Users_Read",
                    type: "POST"
                    },
                update: {
                        url: "Users/Users_Update",
                    type: "POST",
                    complete: function (e) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        }
                    },
                destroy: {
                        url: "/Users/Users_Delete",
                    type: "POST",
                    complete: function (e) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        },


                },
            },
            schema: {
                    data: "Data",
                total: "Total",
                errors: "Errors",
                model: {
                        id: "Id",
                    fields: {
                        Id: { type: "text", editable: false },
                        roles: {}
                    },

                }
                },

            serverSorting: true,
            serverFiltering: true,
            pageSize: 10,
            serverPaging: true,
            sort: [
                { field: "userName", dir: "asc" }
            ],

        },
        columnMenu: true,
        editable: {
                mode: "inline",
            window: {
                    title: "ویرایش",
                width: 500
            },
            confirmation: "آیا می خواهید این کاربر را حذف کنید؟",
        },
        pageable: {
                refresh: true,
            pageSizes: [10, 25, 50, 100],
            buttonCount: 10,
            input: true
        },
        navigatable: true,
        selectable: "single row",
        sortable: {
                mode: "multiple",
            allowUnsort: false
        },
        filterable: true,
        scrollable: false,
        

    });

    function changePassword(e) {
        //alert(e.currentTarget);
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        //alert("Details for: " + data.Id);
        window.location = "Users/Users_ChangePassword/"+ data.id;
    }

    function disableGridButtons(entry) {
        $("#grid").find('[data-uid="' + entry + '"]').find(".k-button").hide();


        }

        function grid_error_handler(e) {

            if (e.errors) {
                var grid = $('#grid').data('kendoGrid');
            $("#grid").data('kendoGrid').cancelChanges();
                //prevent the dataBinding from refreshing so the current edit remains
                grid.one("dataBinding", function (x) {
                    //x.preventDefault();
                    //              alert('b');
                    var message = "";
                $.each(e.errors, function (key, value) {
                        //                    alert('c');
                        if ('errors' in value) {
                        $.each(value.errors, function () {
                                message += this + "\n";
                            });
                        }
                    });
                    alert(message);
                    //CBmessagebox.Warning(message);
                });
            }
        }
</script>
